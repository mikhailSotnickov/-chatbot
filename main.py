import telebot
from telebot import types
import weather
import users
import places
import converter

API_KEY = '1462012638:AAFrR38qrVfg7anRelUid5hEAtbaNtq7rH8'
bot = telebot.TeleBot(API_KEY)

global_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
global_markup.row('–ë–ª–∏–∑–∫–∏–µ –º–µ—Å—Ç–∞', '–û–±–Ω–æ–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é')
global_markup.row('–ü–æ–≥–æ–¥–∞', '–ö—É—Ä—Å –≤–∞–ª—é—Ç')


def get_geo(message):
    location_btn = telebot.types.KeyboardButton('–†–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True)
    cancel_btn = telebot.types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row(location_btn, cancel_btn)
    bot.send_message(message.chat.id, '–í–∫–ª—é—á–∏—Ç–µ –≥–µ–æ–¥–∞–Ω–Ω—ã–µ', reply_markup=markup)


def check_user(message):
    if message.from_user.id not in users.users_list.keys():  # –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        new_user = users.User()  # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users.users_list[message.from_user.id] = new_user


@bot.message_handler(commands=['start'])
def start_message(message):
    check_user(message)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –º–Ω–µ /start', reply_markup=global_markup)


@bot.message_handler(content_types=['text'])
def send_text(message):
    check_user(message)
    cid = message.chat.id
    uid = message.from_user.id
    user = users.users_list[uid]

    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(cid, '–ü—Ä–∏–≤–µ—Ç, —á–µ–º –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?')
    elif message.text.lower() == '–ø–æ–∫–∞':
        bot.send_message(cid, '–î–æ —Å–≤—è–∑–∏!')
    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(cid, '–ß–µ–º –µ—â—ë —è –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=global_markup)
        # –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    elif message.text.lower() == '–æ–±–Ω–æ–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é':
        get_geo(message)
        # –∑–∞–ø—Ä–æ—Å –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö

    elif message.text.lower() == '–±–ª–∏–∑–∫–∏–µ –º–µ—Å—Ç–∞':
        if user.location == {}:  # –µ—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞
            bot.send_message(cid, '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö')
            get_geo(message)
        else:
            count = 3
            places.get_places(user, bot, message, '', count)
        # –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞

    elif message.text.lower() == '–∫—É—Ä—Å –≤–∞–ª—é—Ç':
        markup = types.InlineKeyboardMarkup()
        item1 = types.InlineKeyboardButton("–î–æ–ª–ª–∞—Ä üí≤", callback_data='0')
        item5 = types.InlineKeyboardButton("–†–µ–∑–µ—Ä–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –º–∏—Ä–∞", callback_data='2')
        item2 = types.InlineKeyboardButton("–ï–≤—Ä–æ üá™üá∫", callback_data='1')
        item3 = types.InlineKeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ—É–Ω—Ç üí∑", callback_data='3')
        item4 = types.InlineKeyboardButton("–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫ üá®üá≠", callback_data='4')
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        markup.add(item4)
        markup.add(item5)

        bot.send_message(cid, '–ö–∞–∫–∞—è –í–∞–ª—é—Ç–∞ –Ω—É–∂–Ω–∞?', reply_markup=markup)
        bot.send_message(cid,
                         '–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ https://www.banki.ru/products/currency/cash/moskva/#bank-rates')

    elif message.text.lower() == '–ø–æ–≥–æ–¥–∞':
        if user.location == {}:  # –µ—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞
            bot.send_message(cid, '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö')
            get_geo(message)
        else:
            weather.get_weather(user, bot, message)
        # –ø–æ–≥–æ–¥–∞

    else:
        bot.send_message(cid, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å')
        # –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è


@bot.message_handler(content_types=['sticker'])
def sticker_id(message):
    # print(message)
    pass


@bot.message_handler(content_types=['location'])
def handle_loc(message):
    check_user(message)
    cid = message.chat.id
    uid = message.from_user.id
    user = users.users_list[uid]

    bot.send_message(message.chat.id, '–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', reply_markup=global_markup)
    user.location = message.location
    user.is_have_location = True
    # print(users.users_list[message.from_user.id].location)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    cid = call.message.chat.id
    try:
        if call.message:
            arr_valua = ['–¥–æ–ª–ª–∞—Ä', '–µ–≤—Ä–æ', '—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –º–∏—Ä–∞', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ—É–Ω—Ç', '—à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫']
            bot.send_message(cid, '–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã {} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n*{:.2f}* —Ä—É–±–ª–µ–π'.format(arr_valua[int(call.data)],
                                                                            converter.converter_1(int(call.data))),
                                                                            parse_mode='Markdown')
    except:
        pass


bot.polling()
